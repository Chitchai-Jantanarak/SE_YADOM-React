generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
  OWNER
}

enum BoneStyle {
  COLOR         
  PATTERN
  TEXT
}

enum ProductType {
  ACCESSORY     // 2D Accessory for MAIN_PRODUCT
  MAIN_PRODUCT  // 3D Main Product
  UNKNOWN       // default
}

enum OrderStatus {
  WAITING       // Waiting for user to transmit the order
  PENDING       // Waiting for admin to confirm
  CANCELED      // Canceled by user
  CONFIRMED     // Confirmed by admin
  COMPLETED     // Completed by admin
}

// User Table
model User {
  id                  Int                 @id @default(autoincrement())
  name                String
  email               String              @unique
  password            String
  tel                 String
  address             String
  role                Role                @default(CUSTOMER)

  cartItems           CartItem[]
  orders              Order[]
  modifiedBoneGroups  ModifiedBoneGroup[]

  login_at            DateTime            @default(now())
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
}

// Product Table (Static)
model Product {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String
  price               Float
  type                ProductType         @default(UNKNOWN)
  localUrl            String

  bones               Bone[]              // Related bones for MAIN_PRODUCT
  cartItems           CartItem[]

  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
}

// Bone Table (Static - MAIN_PRODUCT)
model Bone {
  id                  Int                 @id @default(autoincrement())
  productId           Int
  textId              Int?
  name                String
  def_detail          String
  defaultStyle        BoneStyle
  modifiedBones       ModifiedBone[]
  isConfiguration     Boolean

  text                Text?               @relation(fields: [textId], references: [id])
  product             Product             @relation(fields: [productId], references: [id])
}

// Text Table (Static - MAIN_PRODUCT)
model Text {
  id                  Int                 @id @default(autoincrement())
  font                String
  size                Float

  Bone                Bone[]
}

// Aroma Table (Static - MAIN_PRODUCT) 
model Aroma {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String
  price               Float
  cartItems           CartItem[]

  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
}

// ModifiedBone Table (Applied Only (isConfiguration) - MAIN_PRODUCT)
model ModifiedBone {
  id                  Int                 @id @default(autoincrement())
  boneId              Int
  mod_detail          String
  modifiedBoneGroupId Int?

  bone                Bone                @relation(fields: [boneId], references: [id])
  modifiedBoneGroup   ModifiedBoneGroup?  @relation(fields: [modifiedBoneGroupId], references: [id])

  createdAt           DateTime            @default(now())
}

// ModifiedBoneGroup Table (Group of ModifiedBone - MAIN_PRODUCT && User Request Grouped)
model ModifiedBoneGroup {
  id                  Int                 @id @default(autoincrement())
  userId              Int
  cartItem            CartItem[] 
  modifiedBones       ModifiedBone[]
  shareStatus         Boolean             @default(false) // Outside Setter count as false & user Export
  
  user                User                @relation(fields: [userId], references: [id])
  
  created_at          DateTime            @default(now())
}

// CartItem Table
model CartItem {
  id                  Int                 @id @default(autoincrement())
  productId           Int
  aromaId             Int?
  userId              Int
  modifiedBoneGroupId Int?                
  orderId             Int?
  price               Float               // Computed price of the CartItem { (product + aroma) * quantity + delivery }
  quantity            Int
  isUsed              Boolean             @default(true) // Easier for mark used 

  product             Product             @relation(fields: [productId], references: [id])
  aroma               Aroma?              @relation(fields: [aromaId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
  modifiedBoneGroup   ModifiedBoneGroup?  @relation(fields: [modifiedBoneGroupId], references: [id]) 
  Order               Order?              @relation(fields: [orderId], references: [id])

  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?

}

// Order Table (Admin Management)
model Order {
  id                  Int                 @id @default(autoincrement())
  userId              Int

  cartItems           CartItem[]          // Items in the order
  status              OrderStatus         @default(WAITING) // Status for admin setter
  
  user                User                @relation(fields: [userId], references: [id])

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  // Admin Setter
}
